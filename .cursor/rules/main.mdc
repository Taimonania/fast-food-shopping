---
description: 
globs: 
alwaysApply: true
---

# Overview
This repo is based on a template using these technologies: Next.js 15, React 19, Typescript 5, Tailwind CSS 4, ESLint 9,Shadcn UI, Prettier 3

It uses `pnpm` as package manager.

# Model Context Provider (MCPs)
- **Context7**: Provides up-to-date documentation for specific versions of libraries. ALWAYS use this when uncertain how a library works exactly, especially when there is an error concerning one.
- **Convex**: Provides CLI functionality for Convex.
- **Brave Search**: Provides search functionality. Use when trying to get new information about any topic.
- **Git**: Provides CLI functionality for git.

# Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).

# Code Style & Conventions
- **Use TypeScript** as the primary language.
- **Follow best practices for TypeScript**, use strict type safety, clear style conventions, and format with eslint and prettier.
- **Use existing shadcn components whenever possible. Don't implement your own base components!**

# Testing & Reliability
- **Always create Jest unit tests for new features** (functions, classes, routes, etc). Implement the tests first, then the feature, leveraging Test-Driven-Development.
- **Before updating any logic**, check whether existing unit tests need to be updated. If so, do it and then implement the feature.
- **Tests should live in a file** with `*.spec.ts` mirroring the name of the file they're testing.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case
- When a feature is finished, run the unit tests to check if the feature works 

# Documentation & Explainability
- **Comment non-obvious code** and ensure everything is understandable to a mid-level developer.
- When writing complex logic, **add an inline `# Reason:` comment** explaining the why, not just the what.

# AI Behavior Rules
- **Never assume missing context. Ask questions if uncertain.**
- **Never hallucinate libraries or functions**: only use known, verified packages.
- **Always confirm file paths and module names** exist before referencing them in code or tests.
- **Never delete or overwrite existing code** unless explicitly instructed to or if part of a task.
