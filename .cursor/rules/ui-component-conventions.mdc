---
description:
globs:
alwaysApply: false
---
# UI Component Conventions

This project uses Next.js, React, TypeScript, Tailwind CSS, and shadcn/ui. The following conventions are observed for writing UI components:

## 1. File and Component Structure

- Each component is defined as a function component using the `React.FC` or arrow function syntax.
- The main export of the file is the component itself, using `export default`.
- Components are placed in the `src/app/` or `src/components/` directories, following Next.js conventions.

## 2. Imports

- Use absolute imports for project-local modules (e.g., `@/components/ComponentName`).
- Import images and SVGs using Next.js's `Image` component for optimized rendering.
- Import shadcn/ui components and custom demo components at the top of the file.

## 3. Styling

- Tailwind CSS utility classes are used extensively for layout, spacing, typography, and color.
- Classes are applied directly to JSX elements using the `className` prop.
- Responsive design is handled with Tailwind's responsive prefixes (e.g., `sm:`, `md:`).
- Dark mode is supported using Tailwind's `dark:` prefix.

## 4. Layout and Structure

- Use semantic HTML elements (`<main>`, `<div>`, `<ol>`, etc.) for structure.
- Layouts are built using flexbox and grid utilities from Tailwind (e.g., `flex`, `grid`, `gap-x-4`).
- Components are composed together to build complex UIs (e.g., wrapping demo components in a `ComponentWrapper`).

## 5. shadcn/ui Usage

- shadcn/ui components are imported and used as building blocks for UI demos.
- Each demo component is wrapped in a `ComponentWrapper` with a `name` prop for identification.
- The project references shadcn/ui's official repo for examples and inspiration.

## 6. Accessibility and Best Practices

- Use `alt` attributes for all images.
- Use `aria-hidden` for decorative images.
- Use `target="_blank"` and `rel="noopener noreferrer"` for external links.

## 7. Documentation and Comments

- Use inline comments to clarify non-obvious code, especially for complex JSX or when using `prettier-ignore`.
- Provide clear section headings within the component for different UI areas (e.g., "What's included?", "VS Code Extensions").

## 8. Miscellaneous

- Use `priority` prop on Next.js `Image` for important images.
- Use `font-[family-name:var(--font-geist-sans)]` and similar custom font utilities for consistent typography.
- Use `rounded`, `bg-*`, and `border-*` classes for visual polish.

---

**References:**
- [HomePage.tsx](mdc:src/app/(delete-this-and-modify-page.tsx)/HomePage.tsx)
- [page.tsx](mdc:src/app/(delete-this-and-modify-page.tsx)/examples/page.tsx)
